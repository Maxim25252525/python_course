"""
Задача 1: Фильтрация списка +1

Реализуйте класс 'Filter', описывающий фильтрацию списка. При создании
экземпляра класс должен принять 1 аргумент:
- Список

Экземпляр класса 'Filter' должен иметь следующие атрибуты:
- data - данные для фильтрации

Класс должен иметь следующие методы экземпляра:
- filter_by_numbers - возвращает новый список, содержащий только числовые
значения из 'data'.
- filter_by_string - возвращает новый список, содержащий только строковые
значения из 'data'.
- filter_by_slice_numbers - принимает аргументы 'start' и 'end', равные по
умолчанию 0 и 100. Возвращает новый список, содержащий только числовые
значения из 'data', которые находятся в диапазоне от 'start' до
'end' включительно.

> Важно: Все методы должны быть реализованы с использованием генераторов
списков.

> Принадлежность переменной к определенному типу проверяется функцией
isinstance. Например, isinstance(elem, str) - принадлежит ли переменная elem
типу str. Или, isinstance(elem, (int, float)) - принадлежит ли переменная elem
типу int или float.

Под блоком if __name__ == '__main__':
1. Создайте экземпляр класса, передав необходимые аргументы.
2. Проверьте взаимодействие с атрибутами и методами класса.

Добавьте докстринги (описание классов и методов) и аннотации типов (указание
типов параметров и возвращаемых значений) для каждого метода и класса.
"""


class Filter:
    """Класс, описывающий фильтрацию списка."""

    def __init__(self, data: list):
        """
        Инициализация объекта класса Filter.

        Args:
            data: Список для фильтрации.
        """
        self.data = data

    def filter_by_numbers(self) -> list:
        """
        Убирает все нечисловые значения в списке.

        Returns:
            Возвращает новый список, состоящий только из чисел.
        """
        return [num for num in self.data if isinstance(num, (int, float))]

    def filter_by_string(self) -> list:
        """
        Убирает все не строковые значения в списке.

        Returns:
            Возвращает новый список, состоящий только из строк.
        """
        return [el for el in self.data if isinstance(el, str)]

    def filter_by_slice_numbers(self, start: int = 0, end: int = 100) -> list:
        """
        Создает список, состоящий из чисел в списке data,
        которые входят в диапазон от start до end включительно.

        Args:
            start: Начало диапазона.
            end: Конец диапазона(включительно).

        Returns:
            Возвращает новый список,
            состоящий только из чисел выбранного диапазона и списка data.
        """
        return [
            num
            for num in Filter(self.data).filter_by_numbers()
            if start <= num <= end
        ]


if __name__ == "__main__":
    new_data = Filter([1.2, "1.2", 1, [1.2], {1.2: 1.2}, (1.2, 1.3)])
    print(new_data.data)
    print(new_data.filter_by_numbers())
    print(new_data.filter_by_string())
    print(new_data.filter_by_slice_numbers(1, 2))
