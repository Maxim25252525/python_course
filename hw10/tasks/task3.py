"""
Задача 3: Журнал оценок +3

Реализуйте класс 'ClassJournal', описывающий классный журнал. При создании
экземпляра класс должен принять 2 аргумента:
- Список предметов
- Список учеников

Экземпляр класса 'ClassJournal' должен иметь следующие атрибуты:
- class_journal - словарь. Ключ словаря - ФИО ученика. Значение словаря -
другой словарь, который содержит в качестве ключа предмет, а в качестве
значения список оценок по предмету.

Например:
Список предметов: ['Математика', 'Физкультура']
Список учеников: ['Родионова Дарья Артёмовна', 'Макаров Никита Мирославович']

Словарь будет выглядеть следующим образом:
```
{
    'Родионова Дарья Артёмовна': {'Математика': [], 'Физкультура': []},
    'Макаров Никита Мирославович': {'Математика': [], 'Физкультура': []}
}
```

Класс должен иметь следующие методы экземпляра:
- set_mark - принимает на вход аргументы:
1. ФИО ученика
2. Название предмета
3. Оценку по предмету (целочисленное значение от 2 до 5)
Добавляет оценку по предмету ученику.
В данном методе нужно перехватывать ошибку доступа по ключу и вместо ошибки
вызвать исключение с описанием 'Данного ученика или предмета нет в журнале'.
Также метод должен вызывать исключение типа ValueError с описанием 'Оценка
должна принадлежать диапазону от 2 до 5 включительно'.

- get_student_info - Принимает на вход ФИО ученика.
Возвращает полную копию словаря с предметами и оценками для указанного ученика.
В данном методе нужно перехватывать ошибку доступа по ключу и вместо ошибки
вызвать исключение с описанием 'Данного ученика нет в журнале'.

- get_all_info - возвращает полную копию атрибута 'class_journal'.

> Для создания полной копии словаря используйте функцию deepcopy из модуля copy

Пример словаря с оценками:
```
{
    'Родионова Дарья Артёмовна': {'Математика': [4, 5], 'Физкультура': [5]},
    'Макаров Никита Мирославович': {'Математика': [3, 4], 'Физкультура': [4]}
}
```

Постарайтесь использовать генераторы списков и словарей.

Под блоком if __name__ == '__main__':
1. Создайте экземпляр класса, передав необходимые аргументы.
2. Проверьте взаимодействие с атрибутами и методами класса.

Добавьте докстринги (описание классов и методов) и аннотации типов (указание
типов параметров и возвращаемых значений) для каждого метода и класса.
"""

from copy import deepcopy as dp


class ClassJournal:
    """Класс, описывающий журнал класса.

    Args:
        subjects: Список предметов.
        students: Список учеников.

    Attributes:
        class_journal: Словарь в формате:
        {ученик: {предмет: список оценок, ...}, ...}

    """

    def __init__(self, subjects: list[str], students: list[str]):
        """
        Инициализация объекта класса ClassJournal.

        Args:
            subjects: Список предметов.
            students: Список учеников.
        """
        self.class_journal = {
            name: {subject: [] for subject in subjects} for name in students
        }

    def set_mark(self, student: str, subject: str, mark: int):
        """
        Добавляет оценку по предмету ученику.

        Args:
            student: ФИО ученика.
            subject: Название предмета.
            mark: Оценка(целочисленное значение от 2 до 5).
        """
        try:
            if not (2 <= mark <= 5):
                raise ValueError(
                    "Оценка должна быть в диапазоне от 2 до 5 включительно"
                )
            self.class_journal[student][subject].append(mark)
        except KeyError:
            raise KeyError("Данного ученика или предмета нет в журнале")

    def get_student_info(self, student: str) -> dict[str, list[int]]:
        """
        Создает полную копию словаря
        с предметами и оценками для указанного ученика.

        Args:
            student: Ученик.

        Returns:
            Возвращает полную копию словаря
            с предметами и оценками для указанного ученика.
        """
        try:
            return dp(self.class_journal[student])
        except KeyError:
            raise KeyError("Данного ученика нет в журнале")

    def get_all_info(self) -> dict[str, dict[str, list[int]]]:
        """
        Возвращает весь журнал класса.

        Returns:
            Возвращает полную копию атрибута 'class_journal'.
        """
        return dp(self.class_journal)


if __name__ == "__main__":
    my_class = ClassJournal(["Математика", "Физкультура"], ["Даша", "Коля"])
    print(my_class.get_all_info())
    my_class.set_mark("Даша", "Математика", 5)
    print(my_class.get_student_info("Даша"))
    print(my_class.get_student_info("Коля"))
