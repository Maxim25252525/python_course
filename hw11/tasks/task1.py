"""
Задача 1: Драгоценные камни +1

Реализуйте класс 'Gemstone', описывающий драгоценный камень. При создании
экземпляра класс должен принимать 2 аргумента, которые будут сохранены в
соответствующие атрибуты:
- name - Название камня.
- carat - Вес в каратах (вещественное число).

Класс должен иметь следующие методы экземпляра:
- get_name - возвращает имя камня в формате 'Название: <имя камня>'.
Например: Название: топаз
- get_carat - возвращает вес камня в формате: 'Карат: <вес камня>'.
Например: 'Карат: 2.34'

Создайте наследника класса 'Gemstone' - класс 'Diamond', описывающий алмаз.
При создании экземпляра класс должен принимать 3 аргумента:
- Название камня.
- Вес (вещественное число).
- Диаметр (вещественное число).

Экземпляр класса 'Diamond' должен иметь следующие атрибуты, помимо базовых:
- diameter - Максимальный диаметр камня в миллиметрах (вещественное число).

Класс должен иметь следующие методы экземпляра, помимо базовых:
- get_diameter - возвращает максимальный диаметр камня в миллиметрах в формате:
'Диаметр: <вес камня> мм'. Например: 'Диаметр: 2.34 мм'

Создайте наследника класса 'Diamond' - класс 'Brilliant', описывающий
бриллиант. При создании экземпляра класс должен принимать 4 аргумента:
- Название камня.
- Вес (вещественное число).
- Диаметр (вещественное число).
- Стоимость (вещественное число).

Экземпляр класса 'Brilliant' должен иметь следующие атрибуты, помимо базовых:
- cost - стоимость (вещественное число).

Класс должен иметь следующие методы экземпляра, помимо базовых:
- get_cost - возвращает стоимость камня (в рублях):
'Стоимость: <стоимость камня> руб.'. Например: 'Стоимость: 12547839 руб.'

Дополнительно напишите тесты к данной задаче, используя параметризацию.

> Переопределять атрибуты базового класса у наследников запрещается.

Под блоком if __name__ == '__main__':
1. Создайте экземпляр класса, передав необходимые аргументы.
2. Проверьте взаимодействие с атрибутами и методами класса.

Добавьте докстринги (описание классов и методов) и аннотации типов (указание
типов параметров и возвращаемых значений) для каждого метода и класса.
"""
