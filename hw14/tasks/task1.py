"""
# Задача 1: Банковская карточка +1

Реализуйте класс 'Card', описывающий банковскую карточку. При создании
экземпляра класс должен принимать 3 аргумента:
- ФИО держателя карты.
- Наименование платежной системы.
- Пароль к карточке из 4 цифр.

Экземпляр класса 'Card' должен иметь следующие атрибуты:
- user - ФИО держателя карты. Публичный атрибут.
- payment_system - наименование платежной системы. Защищенный атрибут.
- number - номер карты. Приватный атрибут. Число из 16 цифр генерируется
случайным образом c помощью модуля random. Целочисленный тип.
- validity_period - срок действия карты. Защищенный атрибут. Устанавливается
как текущая дата + 3 года. Использует тип date из модуля datetime. Чтобы
получить текущую дату, воспользуйтесь функцией now из модуля datetime.datetime.
Чтобы прибавить 3 года, воспользуйтесь функцией replace из того же модуля.
- code_cv - трехзначный код карты. Приватный атрибут. Генерируется случайным
образом c помощью модуля random. Целочисленный тип.
- pin_code - пин-код к карточке из 4 цифр. Приватный атрибут.
Целочисленный тип. Если количество цифр в пин-коде отлично от четырех или
пин-код не состоит только из цифр - вызовите исключение типа ValueError с
описанием 'Ошибка установки пин-кода'.
- is_blocked - статус карты. Публичный атрибут. Логический тип.
False - карточка разблокирована. True - карточка заблокирована.
По умолчанию - False.
- balance - количество денег на карточке. Защищенный атрибут. Вещественный тип.
По умолчанию 0.

Класс должен иметь следующие методы экземпляра:
- get_payment_system - возвращает платежную систему карточки.
- get_number - возвращает последние 4 цифры номера карты в формате “***1234”.
- get_validity_period - возвращает срок действия карты в формате <месяц>/<год>.
Например: 11/30.
- block - блокировка карточки. Меняет статус карточки на True.
- get_money - Принимает на вход 2 аргумента: сумму для снятия (вещественный
тип) и пин-код (целочисленный тип).
Если пин-код подходит - происходит снятие средств. Если пин-код не подошел -
вызывается исключение типа PermissionError с описанием 'Неверный пин-код'.
Если на карточке меньше средств, чем количество денег для снятия, вызывается
исключение типа ValueError с описанием: 'Недостаточное количество средств'
- get_balance - возвращает количество средств на карте.
- put_money - Принимает на вход 2 аргумента: сумму для внесения (вещественный
тип) и пин-код (целочисленный тип).
Если пин-код подходит - происходит внесение средств. Если пин-код не подошел -
вызывается исключение типа PermissionError с описанием 'Неверный пин-код'.
Если количество средств для внесения меньше или равно 0, то вызывается
исключение типа ValueError c описанием: 'Количество средств для внесения должно
быть больше 0'.

Класс должен иметь следующий магический метод:
- __str__ - переопределение вывода объекта. Возвращает информацию по
карте в формате: 'Данная карта принадлежит <ФИО владельца>.'.
Например: 'Данна карта принадлежит Иванову Ивану Ивановичу.'

Класс должен иметь следующие статические методы:
- get_cv - возвращает вместо кода три звездочки в формате ***.
- get_info - возвращает правила пользования карточкой в формате:
```
Правила пользования карточкой:
1. Запомнить ПИН-код и нигде его не сохранять.
2. Не передавать карту другим людям.
3. Подключить push-уведомления или СМС-оповещения.
4. Бережно относиться к карточке.
5. Если карта потеряна, сразу же связаться с банком.
6. Не хранить крупную сумму.
```

Под блоком if __name__ == '__main__':
1. Создайте экземпляр класса, передав необходимые аргументы.
2. Проверьте взаимодействие с атрибутами и методами класса.

Добавьте докстринги (описание классов и методов) и аннотации типов (указание
типов параметров и возвращаемых значений) для каждого метода и класса.
"""


import random
import datetime


class Card:
    """
    Класс, описывающий банковскую карту.

    Args:
        user: ФИО владельца карты.
        payment: Платежная система карты.
        pin_code: Пароль карты, состоит из 4 цифр.

    Attributes:
        user: ФИО владельца карты.
        is_blocked: Статус карты.
        _balance: Количество денег на карточке(вещественный тип).
        _payment: Платежная система карты.
        _validity_period: Срок действия карты.
        __pin_code: Пароль карты, состоит из 4 цифр.
        __number: Номер карты.
        __code_cv: Код карты.
    """
    def __init__(self, user: str, payment: str, pin_code: int):
        """
        Инициализация объекта класса Card.

        Args:
            user: ФИО владельца карты.
            payment: Платежная система карты.
            pin_code: Пароль карты, состоит из 4 цифр.
        """
        pin = str(pin_code)
        if len(pin) != 4 or not pin.isdigit():
            raise ValueError('Ошибка установки пин-кода')

        now = datetime.datetime.now()
        self.user = user
        self.is_blocked = False
        self._balance = 0
        self._payment = payment
        self._validity_period = now.replace(year=now.year + 3).date()
        self.__pin_code = pin_code
        self.__number: int = random.randint(10 ** 15, 10 ** 16 - 1)
        self.__code_cv = random.randint(100, 999)

    def __str__(self):
        return f'Данная карта принадлежит {self.user}.'

    def get_payment_system(self) -> str:
        """
        Возвращает платежную систему карты.

        Returns:
            Платежная система карты.
        """
        return self._payment

    def get_number(self) -> str:
        """
        Возвращает номер карты.

        Returns:
            Последние 4 цифры номера карты.
        """
        return self.get_cvc(self.__number)

    def get_validity_period(self) -> str:
        """
        Возвращает срок действия карты.

        Returns:
            Срок действия карты в формате: 'месяц/год'.
        """
        return self._validity_period.strftime('%m/%y')

    def block(self):
        """Блокирует карту."""
        self.is_blocked = True

    def get_money(self, money: float, pin_code: int):
        """
        Производит снятие средств со счета.

        Args:
            money: Сумма денег.
            pin_code: Пароль карты.
        """
        if self.__pin_code != pin_code:
            raise PermissionError('Неверный пин-код')
        elif money > self._balance:
            raise ValueError('Недостаточное количество средств')
        self._balance -= money

    def get_balance(self) -> float:
        """
        Возвращает баланс карты.

        Returns:
            Баланс карты.
        """
        return self._balance

    def put_money(self, money: float, pin_code: int):
        """
        Производит внесение средств на счет.

        Args:
            money: Сумма денег.
            pin_code: Пароль карты.
        """
        if self.__pin_code != pin_code:
            raise PermissionError('Неверный пин-код')
        elif money <= 0:
            raise ValueError('Количество средств для внесения должно быть больше 0')
        self._balance += money

    @staticmethod
    def get_cvc(number: int) -> str:
        """
        Возвращает номер карты.
        Args:
            number: Номер карты.

        Returns:
            Последние 4 цифры номера карты.
        """
        return f'***{str(number)[-3:]}'

    @staticmethod
    def get_info(rules: str) -> str:
        """
        Возвращает правила пользования карточкой.

        Returns:
            Правила пользования карточкой в виде списка.
        """
        return f'Правила пользования карточкой:\n{rules}'


if __name__ == '__main__':
    card = Card('Александр Бардин', 'Visa', 1234)
    print(card)
    print(card.get_balance())
    print(card.get_number())
    print(card.get_payment_system())
    print(card.get_validity_period())
    card.put_money(1000, 1234)
    print(card.get_balance())
    print(card.get_info("1. Запомнить ПИН-код и нигде его не сохранять.\n"
                        "2. Не передавать карту другим людям.\n"
                        "3. Подключить push-уведомления или СМС-оповещения.\n"
                        "4. Бережно относиться к карточке.\n"
                        "5. Если карта потеряна, сразу же связаться с банком.\n"
                        "6. Не хранить крупную сумму."))
