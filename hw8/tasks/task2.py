"""
# Задание 2: Формирование словаря со степенями чисел +1

Напишите функцию 'get_degrees'.

Функция должна принимать три аргумента:
- start - начальное значение диапазона (натуральное число).
- end - конечное значение диапазона (натуральное число).
- degree - максимальная степень (натуральное число, по умолчанию 10).

Функция должна возвращать словарь, где:
- Ключи - числа от start до end включительно.
- Значения - списки, где каждый элемент - это ключ, возведённый в степень,
равную индексу элемента списка. Максимальная степень до которой нужно возводить
(включительно) определяется параметром 'degree'.

Если значения параметров некорректны:
- первый параметр больше второго
- параметры не являются натуральными числами
нужно вызвать исключение типа ValueError.
Если первый параметр больше второго, то в описании исключения должен быть текст
'Первый параметр больше второго'.
Если параметры не являются натуральными числами, то в описании исключения
должен быть текст 'Параметр(ы) не являются натуральными числами'.

> Для проверки соответствия переменной определенному типу нужно использовать
функцию isinstance. Например: isinstance(my_value, str) - проверка, что тип
переменной my_value - строковый.

Под блоком if __name__ == '__main__': выполните функцию, передав ей нужные
аргументы, и распечатайте результат вызова функции. В данной задаче ожидать
ввода пользователя не нужно!

Напишите тесты для функции, используя параметризацию.

Добавьте докстринг (описание функции) и аннотацию типов (указание типов
параметров и возвращаемых значений) для функции.

Примеры вызова функции:
Call:
```
get_degrees(2, 3)
```

Return:
```
{2: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], 3: [1, 3, 9, 27, 81, 243,
729, 2187, 6561, 19683, 59049]}
```

Call:
```
get_degrees(2, 5, 3)
```

Return:
```
{2: [1, 2, 4, 8], 3: [1, 3, 9, 27], 4: [1, 4, 16, 64], 5: [1, 5, 25, 125]}
```
"""
