"""
# Задача 2: Маги +1

Реализуйте класс 'Mage', описывающий мага. При создании экземпляра класс должен
принимать 1 аргумент:
- имя мага

Экземпляр класса 'Mage' должен иметь следующие атрибуты:
- name - имя мага
- life - количество жизни (по умол. 100)
- damage - количество урона (по умол. 20)
- energy - количество энергии (по умол. 100)

Класс должен иметь следующие методы экземпляра:
1. Получение информации:
- get_name - возвращает имя мага, как "My name is <имя>". Например, My name is
Oris
- get_life - возвращает количество жизни, как "Life: <жизни>"
- get_damage - возвращает количество урона, как "Damage: <урон>"
- get_energy - возвращает количество энергии, как "Energy: <энергия>"

2. Изменение характеристик
- increase_life - увеличивает количество жизни на 20
- reduce_life - уменьшает количество жизни на 20.
- increase_damage - увеличивает количество урона на 20
- reduce_damage - уменьшает количество урона на 20
- increase_energy - увеличивает количество энергии на 20
- reduce_energy - уменьшает количество энергии на 50

> Если после вычитания 20 из текущего уровня жизни результат окажется меньше
нуля, то уровень жизни нужно установить на 0, так как он не может быть
отрицательным.
Если показатель жизни равен нулю, то при последующих попытках уменьшить
количество жизни должно вызываться исключение типа ValueError с текстом
'Показатель жизни на нуле'.

Например, количество жизни равно 10. После вызова функции reduce_life
количество жизни стало равняться -0. Если мы еще раз вызовем reduce_life, то
возникнет исключение ValueError с текстом 'Показатель жизни на нуле'.

> Если после вычитания 20 из текущего уровня урона результат окажется меньше
нуля, то уровень урона нужно установить на 0, так как он не может быть
отрицательным.
Если показатель урона равен нулю, то при последующих попытках уменьшить
количество урона должно вызываться исключение типа ValueError с текстом
'Показатель урона на нуле'.

> Если после вычитания 50 из текущего уровня энергии результат окажется меньше
нуля, то уровень энергии нужно установить на 0, так как он не может быть
отрицательным.
Если показатель энергии равен нулю, то при последующих попытках уменьшить
количество энергии должно вызываться исключение типа ValueError с текстом
'Показатель энергии на нуле'.

После этого реализуйте класс 'FireMage', описывающий огненного мага.
Класс должен наследоваться от класса 'Mage'.

Добавьте в класс 'FireMage' следующий метод экземпляра:
- apply_ability - суперспособность огненного мага. Уменьшает количество энергии
на 50, если энергии достаточно для приема (не меньше 50) и возвращает строку
'FIRE.....'.
Иначе энергия не уменьшается и метод возвращает строку 'Phhh...'.

Для уменьшения энергии используйте внутри 'apply_ability' соответствующий метод
'reduce_energy'.

Например, количество энергии 70, тогда метод уменьшит энергию до 20 и вернет
строку 'FIRE.....'.
Если количество энергии равно 20 и мы вызовем данный метод, то уменьшения
энергии не произойдет и метод вернет строку 'Phhh...'.

Под блоком if __name__ == '__main__':
1. Создайте экземпляр класса, передав необходимые аргументы.
2. Проверьте взаимодействие с атрибутами и методами класса.

Добавьте докстринги (описание классов и методов) и аннотации типов (указание
типов параметров и возвращаемых значений) для каждого метода и класса.
"""


class Mage:
    """Класс, описывающий мага.

    Args:
        name: Имя мага.

    Attributes:
        name: Имя мага.
        life: Количество жизни (по умол. 100).
        damage: Количество урона (по умол. 20).
        energy: Количество энергии (по умол. 100).

    """

    def __init__(
        self, name: str
    ):
        """
        Инициализация объекта класса Mage.

        Args:
            name: Имя.
        """
        self.name = name
        self.life = 100
        self.damage = 20
        self.energy = 100

    def get_name(self) -> str:
        """
        Возвращает имя мага как <My name is {имя мага}>.

        Returns:
            Возвращает строку с именем мага.
        """
        return f"My name is {self.name}"

    def get_life(self) -> str:
        """
        Возвращает текущий показатель жизни мага как
        <Life: {текущий показатель жизни}>.

        Returns:
            Возвращает текущий показатель жизни мага.
        """
        return f"Life: {self.life}"

    def get_damage(self) -> str:
        """
        Возвращает текущий показатель урона мага как
        <Damage: {текущий показатель урона}>.

        Returns:
            Возвращает текущий показатель урона мага.
        """
        return f"Damage: {self.damage}"

    def get_energy(self) -> str:
        """
        Возвращает текущий показатель энергии мага
        как <Energy: {текущий показатель энергии}>.

        Returns:
            Возвращает текущий показатель энергии мага.
        """
        return f"Energy: {self.energy}"

    def increase_life(self) -> None:
        """Увеличивает показатель жизни мага на 20."""
        self.life += 20

    def reduce_life(self) -> None:
        """
        Уменьшает показатель жизни мага на 20.
        Если показатель жизни меньше 20, то устанавливает его на 0.
        """
        if 0 < self.life < 20:
            self.life = 0
        elif self.life >= 20:
            self.life -= 20
        else:
            raise ValueError("Показатель жизни на нуле")

    def increase_damage(self) -> None:
        """Увеличивает показатель урона мага на 20."""
        self.damage += 20

    def reduce_damage(self) -> None:
        """
        Уменьшает показатель урона мага на 20.
        Если показатель урона меньше 20, то устанавливает его на 0.
        """
        if 0 < self.damage < 20:
            self.damage = 0
        elif self.damage >= 20:
            self.damage -= 20
        else:
            raise ValueError("Показатель урона на нуле")

    def increase_energy(self) -> None:
        """Увеличивает показатель энергии мага на 20."""
        self.energy += 20

    def reduce_energy(self) -> None:
        """
        Уменьшает показатель энергии мага на 50.
        Если показатель энергии меньше 50, то устанавливает его на 0.
        """
        if 0 < self.energy < 50:
            self.energy = 0
        elif self.energy >= 50:
            self.energy -= 50
        else:
            raise ValueError("Показатель энергии на нуле")


class FireMage(Mage):
    """Класс, описывающий огненного мага."""

    def apply_ability(self) -> str:
        """
        Уменьшает показатель энергии мага на 50.
        Если энергии меньше 50, то она не уменьшается.

        Returns:
            'FIRE.....' - если энергии не меньше 50,
            'Phhh...' - иначе.
        """
        if self.energy >= 50:
            self.energy -= 50
            return "FIRE....."
        else:
            return "Phhh..."


if __name__ == "__main__":
    common_mage = Mage("Johan")
    fire_mage = FireMage("Rudolf")
    print(common_mage.get_name())
    print(fire_mage.get_name())
    print(common_mage.get_energy())
    fire_mage.reduce_energy()
    print(fire_mage.get_energy())
    fire_mage.increase_energy()
    print(fire_mage.get_energy())
    print(fire_mage.apply_ability())
    print(fire_mage.get_energy())
    print(fire_mage.apply_ability())
