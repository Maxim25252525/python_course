"""
# Задача 2: Маги +1

Реализуйте класс 'Mage', описывающий мага. При создании экземпляра класс должен
принимать 1 аргумент:
- имя мага

Экземпляр класса 'Mage' должен иметь следующие атрибуты:
- name - имя мага
- life - количество жизни (по умол. 100)
- damage - количество урона (по умол. 20)
- energy - количество энергии (по умол. 100)

Класс должен иметь следующие методы экземпляра:
1. Получение информации:
- get_name - возвращает имя мага, как "My name is <имя>". Например, My name is
Oris
- get_life - возвращает количество жизни, как "Life: <жизни>"
- get_damage - возвращает количество урона, как "Damage: <урон>"
- get_energy - возвращает количество энергии, как "Energy: <энергия>"

2. Изменение характеристик
- increase_life - увеличивает количество жизни на 20
- reduce_life - уменьшает количество жизни на 20.
- increase_damage - увеличивает количество урона на 20
- reduce_damage - уменьшает количество урона на 20
- increase_energy - увеличивает количество энергии на 20
- reduce_energy - уменьшает количество энергии на 50

> Если после вычитания 20 из текущего уровня жизни результат окажется меньше
нуля, то уровень жизни нужно установить на 0, так как он не может быть
отрицательным.
Если показатель жизни равен нулю, то при последующих попытках уменьшить
количество жизни должно вызываться исключение типа ValueError с текстом
'Показатель жизни на нуле'.

Например, количество жизни равно 10. После вызова функции reduce_life
количество жизни стало равняться -0. Если мы еще раз вызовем reduce_life, то
возникнет исключение ValueError с текстом 'Показатель жизни на нуле'.

> Если после вычитания 20 из текущего уровня урона результат окажется меньше
нуля, то уровень урона нужно установить на 0, так как он не может быть
отрицательным.
Если показатель урона равен нулю, то при последующих попытках уменьшить
количество урона должно вызываться исключение типа ValueError с текстом
'Показатель урона на нуле'.

> Если после вычитания 50 из текущего уровня энергии результат окажется меньше
нуля, то уровень энергии нужно установить на 0, так как он не может быть
отрицательным.
Если показатель энергии равен нулю, то при последующих попытках уменьшить
количество энергии должно вызываться исключение типа ValueError с текстом
'Показатель энергии на нуле'.

После этого реализуйте класс 'FireMage', описывающий огненного мага.
Класс должен наследоваться от класса 'Mage'.

Добавьте в класс 'FireMage' следующий метод экземпляра:
- apply_ability - суперспособность огненного мага. Уменьшает количество энергии
на 50, если энергии достаточно для приема (не меньше 50) и возвращает строку
'FIRE.....'.
Иначе энергия не уменьшается и метод возвращает строку 'Phhh...'.

Для уменьшения энергии используйте внутри 'apply_ability' соответствующий метод
'reduce_energy'.

Например, количество энергии 70, тогда метод уменьшит энергию до 20 и вернет
строку 'FIRE.....'.
Если количество энергии равно 20 и мы вызовем данный метод, то уменьшения
энергии не произойдет и метод вернет строку 'Phhh...'.

Под блоком if __name__ == '__main__':
1. Создайте экземпляр класса, передав необходимые аргументы.
2. Проверьте взаимодействие с атрибутами и методами класса.

Добавьте докстринги (описание классов и методов) и аннотации типов (указание
типов параметров и возвращаемых значений) для каждого метода и класса.
"""
